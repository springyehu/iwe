name: Build and Push arm64 Docker Image

# 触发器：在推送到 main 分支时，或手动触发时运行
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    # 设定权限，允许工作流向 GHCR 写入包
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout self repository
        uses: actions/checkout@v4
        # 这个步骤会检出你自己的仓库，里面包含 Dockerfile 和这个 workflow 文件

      - name: Clone iwechat repository
        # 这个步骤会克隆外部仓库到名为 iwechat-src 的文件夹中
        # --depth 1 表示只克隆最新的 commit，加快速度
        run: git clone --depth 1 https://github.com/iwechatcom/iwechat.git iwechat-src

      - name: Set up QEMU
        # 设置 QEMU，这是跨平台构建的关键
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # 设置 Buildx，这是 Docker 的多架构构建工具
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        # 登录到 GHCR，以便推送镜像
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # context 设置为 . 表示构建上下文是仓库根目录
          # 这样 Dockerfile 就可以访问到 iwechat-src 目录
          file: ./Dockerfile
          # 指定要构建的平台
          platforms: linux/arm64
          # 推送镜像到 GHCR
          push: true
          # 为镜像打标签
          # 格式: ghcr.io/YOUR_GITHUB_USERNAME/REPO_NAME:latest
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest,ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}
